import java.util.*;

// Class 1: User (for login details)
class User {
    String userId;
    String pin;

    public User(String userId, String pin) {
        this.userId = userId;
        this.pin = pin;
    }

    public boolean validate(String userId, String pin) {
        return this.userId.equals(userId) && this.pin.equals(pin);
    }
}

// Class 2: Account (for balance and transactions)
class Account {
    double balance;
    List<String> transactionHistory;

    public Account() {
        balance = 1000.0; // default balance
        transactionHistory = new ArrayList<>();
    }

    public void deposit(double amount) {
        balance += amount;
        transactionHistory.add("Deposited: ₹" + amount);
    }

    public boolean withdraw(double amount) {
        if (amount <= balance) {
            balance -= amount;
            transactionHistory.add("Withdrew: ₹" + amount);
            return true;
        } else {
            transactionHistory.add("Failed Withdrawal: ₹" + amount + " (Insufficient Balance)");
            return false;
        }
    }

    public boolean transfer(double amount, Account receiver) {
        if (amount <= balance) {
            balance -= amount;
            receiver.balance += amount;
            transactionHistory.add("Transferred: ₹" + amount + " to another account");
            return true;
        } else {
            transactionHistory.add("Failed Transfer: ₹" + amount + " (Insufficient Balance)");
            return false;
        }
    }

    public void showHistory() {
        System.out.println("\n--- Transaction History ---");
        if (transactionHistory.isEmpty()) {
            System.out.println("No transactions yet.");
        } else {
            for (String record : transactionHistory) {
                System.out.println(record);
            }
        }
        System.out.println("---------------------------\n");
    }
}

// Class 3: ATM (handles operations)
class ATM {
    private User user;
    private Account account;
    private Scanner sc;

    public ATM(User user, Account account) {
        this.user = user;
        this.account = account;
        sc = new Scanner(System.in);
    }

    public void start() {
        System.out.println("===== Welcome to ATM =====");
        System.out.print("Enter User ID: ");
        String userId = sc.nextLine();
        System.out.print("Enter PIN: ");
        String pin = sc.nextLine();

        if (user.validate(userId, pin)) {
            System.out.println("\nLogin Successful!\n");
            menu();
        } else {
            System.out.println("Invalid User ID or PIN!");
        }
    }

    private void menu() {
        while (true) {
            System.out.println("===== ATM Menu =====");
            System.out.println("1. Transaction History");
            System.out.println("2. Withdraw");
            System.out.println("3. Deposit");
            System.out.println("4. Transfer");
            System.out.println("5. Quit");
            System.out.print("Choose an option: ");

            int choice = sc.nextInt();
            switch (choice) {
                case 1:
                    account.showHistory();
                    break;
                case 2:
                    withdraw();
                    break;
                case 3:
                    deposit();
                    break;
                case 4:
                    transfer();
                    break;
                case 5:
                    System.out.println("Thank you for using the ATM. Goodbye!");
                    return;
                default:
                    System.out.println("Invalid option. Try again!");
            }
        }
    }

    private void withdraw() {
        System.out.print("Enter amount to withdraw: ");
        double amount = sc.nextDouble();
        if (account.withdraw(amount)) {
            System.out.println("Withdrawal Successful! Current Balance: ₹" + account.balance);
        } else {
            System.out.println("Insufficient Balance!");
        }
    }

    private void deposit() {
        System.out.print("Enter amount to deposit: ");
        double amount = sc.nextDouble();
        account.deposit(amount);
        System.out.println("Deposit Successful! Current Balance: ₹" + account.balance);
    }

    private void transfer() {
        System.out.print("Enter amount to transfer: ");
        double amount = sc.nextDouble();

        Account receiver = new Account(); // demo: a new receiver account
        if (account.transfer(amount, receiver)) {
            System.out.println("Transfer Successful! Current Balance: ₹" + account.balance);
        } else {
            System.out.println("Insufficient Balance!");
        }
    }
}

// Class 4: ATMApp (main class)
public class ATMInterface {
    public static void main(String[] args) {
        User user = new User("user123", "1234"); // demo credentials
        Account account = new Account();
        ATM atm = new ATM(user, account);
        atm.start();
    }
}
